name: Unified build test and scan
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"
    types:
      - labeled
      - opened
      - synchronize
      - reopened
  release:
    types: [published]

concurrency:
  # Using `github.run_id` (unique val) instead of `github.ref` here
  # because we don't want to cancel this workflow on master only for PRs
  #   as that makes reproducing issues easier
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_CACHE: "DEPOT"
  DEPOT_TOKEN: ${{ secrets.DEPOT_TOKEN }}
  DEPOT_PROJECT_ID: ${{ secrets.DEPOT_PROJECT_ID }}
  DATAHUB_GMS_IMAGE: "acryldata/datahub-gms"
  DATAHUB_FRONTEND_IMAGE: "acryldata/datahub-frontend-react"
  DATAHUB_MAE_CONSUMER_IMAGE: "acryldata/datahub-mae-consumer"
  DATAHUB_MCE_CONSUMER_IMAGE: "acryldata/datahub-mce-consumer"
  DATAHUB_KAFKA_SETUP_IMAGE: "acryldata/datahub-kafka-setup"
  DATAHUB_ELASTIC_SETUP_IMAGE: "acryldata/datahub-elasticsearch-setup"
  DATAHUB_MYSQL_SETUP_IMAGE: "acryldata/datahub-mysql-setup"
  DATAHUB_UPGRADE_IMAGE: "acryldata/datahub-upgrade"
  DATAHUB_INGESTION_BASE_IMAGE: "acryldata/datahub-ingestion-base"
  DATAHUB_INGESTION_IMAGE: "acryldata/datahub-ingestion"

permissions:
  contents: read
  id-token: write

jobs:
  setup:
    runs-on: depot-ubuntu-24.04-small
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      slim_tag: ${{ steps.tag.outputs.slim_tag }}
      full_tag: ${{ steps.tag.outputs.full_tag }}
      short_sha: ${{ steps.tag.outputs.short_sha }} # needed for auto-deploy
      unique_tag: ${{ steps.tag.outputs.unique_tag }}
      unique_slim_tag: ${{ steps.tag.outputs.unique_slim_tag }}
      unique_full_tag: ${{ steps.tag.outputs.unique_full_tag }}
      docker-login: ${{ steps.docker-login.outputs.docker-login }}
      publish: ${{ steps.publish.outputs.publish }}
      pr-publish: ${{ steps.pr-publish.outputs.publish }}
      python_release_version: ${{ steps.tag.outputs.python_release_version }}
      branch_name: ${{ steps.tag.outputs.branch_name }}
      repository_name: ${{ steps.tag.outputs.repository_name }}
      frontend_change: ${{ steps.ci-optimize.outputs.frontend-change == 'true' }}
      ingestion_change: ${{ steps.ci-optimize.outputs.ingestion-change == 'true' }}
      ingestion_base_change: ${{ steps.ci-optimize.outputs.ingestion-base-change == 'true' }}
      backend_change: ${{ steps.ci-optimize.outputs.backend-change == 'true' }}
      frontend_only: ${{ steps.ci-optimize.outputs.frontend-only == 'true' }}
      ingestion_only: ${{ steps.ci-optimize.outputs.ingestion-only == 'true' }}
      backend_only: ${{ steps.ci-optimize.outputs.backend-only == 'true' }}
      kafka_setup_change: ${{ steps.ci-optimize.outputs.kafka-setup-change == 'true' }}
      mysql_setup_change: ${{ steps.ci-optimize.outputs.mysql-setup-change == 'true' }}
      postgres_setup_change: ${{ steps.ci-optimize.outputs.postgres-setup-change == 'true' }}
      elasticsearch_setup_change: ${{ steps.ci-optimize.outputs.elasticsearch-setup-change == 'true' }}
      smoke_test_change: ${{ steps.ci-optimize.outputs.smoke-test-change == 'true' }}
      integrations_service_change: "false"
      datahub_executor_change: "false"
    steps:
      - name: Check out the repo
        uses: acryldata/sane-checkout-action@v3
      - name: Compute Tag
        id: tag
        run: |
          source .github/scripts/docker_helpers.sh
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "tag=$(get_tag)" >> "$GITHUB_OUTPUT"
          echo "slim_tag=$(get_tag_slim)" >> "$GITHUB_OUTPUT"
          echo "full_tag=$(get_tag_full)" >> "$GITHUB_OUTPUT"
          echo "unique_tag=$(get_unique_tag)" >> "$GITHUB_OUTPUT"
          echo "unique_slim_tag=$(get_unique_tag_slim)" >> "$GITHUB_OUTPUT"
          echo "unique_full_tag=$(get_unique_tag_full)" >> "$GITHUB_OUTPUT"
          echo "python_release_version=$(get_python_docker_release_v)" >> "$GITHUB_OUTPUT"
          echo "branch_name=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_OUTPUT"
          echo "repository_name=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_OUTPUT"
      - name: Check whether docker login is possible
        id: docker-login
        env:
          ENABLE_DOCKER_LOGIN: ${{ secrets.ACRYL_DOCKER_PASSWORD != '' }}
        run: |
          echo "Enable Docker Login: ${{ env.ENABLE_DOCKER_LOGIN }}"
          echo "docker-login=${{ env.ENABLE_DOCKER_LOGIN }}" >> "$GITHUB_OUTPUT"
      - name: Check whether publishing enabled
        id: publish
        env:
          ENABLE_PUBLISH: >-
             ${{
                github.event_name != 'pull_request'
                && ( secrets.ACRYL_DOCKER_PASSWORD != '' )
             }}
        run: |
          echo "Enable publish: ${{ env.ENABLE_PUBLISH }}"
          echo "publish=${{ env.ENABLE_PUBLISH }}" >> "$GITHUB_OUTPUT"
      - name: Check whether PR publishing enabled
        id: pr-publish
        env:
          ENABLE_PUBLISH: >-
             ${{
                (github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'publish') || contains(github.event.pull_request.labels.*.name, 'publish-docker')))
                && ( secrets.ACRYL_DOCKER_PASSWORD != '' )
             }}
        run: |
          echo "Enable PR publish: ${{ env.ENABLE_PUBLISH }}"
          echo "publish=${{ env.ENABLE_PUBLISH }}" >> "$GITHUB_OUTPUT"


  quickStartBuild:
    name: Build all quickstart images
    runs-on: depot-ubuntu-24.04
    needs: setup
    steps:
      - name: Free up disk space
        run: |
          df -h
          sudo apt-get remove 'dotnet-*' azure-cli || true
          sudo rm -rf /usr/local/lib/android/ || true
          sudo docker image prune -a -f || true
          df -h
          lscpu
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17
      - uses: gradle/actions/setup-gradle@v4

      - name: Check out the repo
        uses: acryldata/sane-checkout-action@v3
    
      - name: Set up Depot CLI
        if: ${{ env.DOCKER_CACHE == 'DEPOT' }}
        uses: depot/setup-action@v1

      - name: configure-docker
        if: ${{ env.DOCKER_CACHE == 'DEPOT' }}  
        run: |
          depot configure-docker

      - name: Pre-build artifacts for docker image
        run: |
          ./gradlew quickstartdebugprepareall
          find metadata-service/war/build/docker/
          find datahub-frontend/build/docker/

      
      - name: run unit tests
        run: |
          ./gradlew :metadata-service:iceberg-catalog:test
  
      - name: Build images
        run: |
          ./gradlew dockerTag -x :docker:datahub-ingestion:dockerTag  -x :docker:datahub-ingestion-base:dockerTag
    
      - name: Show images
        run: |
          docker images